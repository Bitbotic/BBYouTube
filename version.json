{
  "version": 1,
  "lib": "/*jshint esnext: true */
//Constants
var BBYTKEventLabels = {
  embedded: "embedded",
  detailpage: "detailpage"
};

var BBYTKResultCode = {
  correct: 0,
  youtubeVideoIdEmpty: 1,
  requestFailed: 2,
  maxNumberOfRequestsReached: 3,
};

var BBYTKErrors = {
  noError: "BBYTDLNoError",
  videoErrorDomain: "BBYTDLVideoError",
  youTubeErrorUseCipherSignature: -1000,
  youTubeErrorNoStreamAvailable: -2,
  youTubeErrorNetwork: -1,
  youTubeErrorInvalidVideoIdentifier: 2,
  youTubeErrorRestrictedPlayback: 150,
  errorDescriptionInfoKey: "eDescriptionKey",
  noStreamVideoUserInfoKey: "NoStreamVideo"
};

var BBYTDLKUrls = {
  getVideoInfo: "https://www.youtube.com/get_video_info?",
  watchVideo: "https://www.youtube.com/watch?",
  embedURLString: "https://www.youtube.com/embed/"
};

var BBYTDLKRequestTypes = {
  getVideoInfo: 0,
  watchVideo: 1,
  embedPage: 2,
  javaScriptPlayer: 3,
};

var BBYTDLKMisc = {
  allowedCountriesUserInfoKey: "AllowedCountries",

  videoQualityHTTPLiveStreaming: "HTTPLiveStreaming",
};

//Global vars
var debug = true;
var requestCount = 0;

var ytdl = {
  videoIdentifier: "",
  languageIdentifier: "en",
  useEventLabels: [BBYTKEventLabels.embedded, BBYTKEventLabels.detailpage],
  currentRequestType: BBYTDLKRequestTypes.getVideoInfo,
  result: {},
  lastError: {},
  noStreamVideo: {},
  youTubeError: {},
  webpage: "",
  playerScript: null,
  getVideo: function(youtubeVideoId, languageId){

//    if (debug) {
//      youtubeVideoId = "_zR6ROjoOX0";
//      languageId = "es";
//    }

    if(youtubeVideoId && languageId && youtubeVideoId !== "" && languageId !== "") {
      this.videoIdentifier = youtubeVideoId;
      this.languageIdentifier = languageId;
      //console.log("Getting video: id => " + this.videoIdentifier + ", language id => " + this.languageIdentifier);
      this.startNextRequest();
    }
    else {
      result.code = BBYTKResultCode.youtubeVideoIdEmpty;
      result.message = "Video and Language IDs must be defined";
      ytdlCallback(JSON.stringify(result));
      return;
    }
  },
  startNextRequest: function() {
    if (this.useEventLabels.length > 0) {
      var eventLabel = this.useEventLabels[0];
      this.useEventLabels.splice(0, 1);
      this.startRequestWithData(this.videoIdentifier, this.languageIdentifier, BBYTDLKRequestTypes.getVideoInfo, eventLabel);
    } else {
      if (this.currentRequestType === BBYTDLKRequestTypes.watchVideo) {
        this.result.code = BBYTKResultCode.requestFailed;
        this.result.message = "Video and Language IDs must be defined";
        ytdlCallback(JSON.stringify(result));
        return;
      }
      else {
        this.startWatchPageRequest();
      }
    }
  },
  startRequestWithData: function(videoIdentifier, languageIdentifier, requestType, eventLabel) {
    this.currentRequestType = requestType;
    BBYTDLUtils.sendYTRequest(videoIdentifier, languageIdentifier, requestType, eventLabel, function(err, response){
      if (err) {
        this.finishWithError(err);
        return;
      }
      else {
        this.processResponse(response);
      }
    }.bind(this));
  },
  startWatchPageRequest: function() {
    this.startRequestWithData(this.videoIdentifier, this.languageIdentifier, BBYTDLKRequestTypes.watchVideo, "");
  },
  finishWithError: function(err){
    this.result.code = err.code;
    this.result.message = err.message;
    ytdlCallback(JSON.stringify(this.result));
  },
  finishWithVideo: function(video) {
    json = {
      title: video.title,
      duration: video.duration,
      expiration: video.expirationDate,
      urls: video.streamURLs
    }
    ytdlCallback(JSON.stringify(json));
  },
  processResponse: function(response) {
    switch (this.currentRequestType) {
      case BBYTDLKRequestTypes.getVideoInfo:
          this.processResponseGetVideoInfo(BBYTDLUtils.queryStringToObject(response));
          break;
      case BBYTDLKRequestTypes.watchVideo:
          this.processResponseWithHTMLString(response);
          break;
      case BBYTDLKRequestTypes.embedPage:
          this.processResponseWithHTMLString(response);
          break;
      case BBYTDLKRequestTypes.javaScriptPlayer:
          this.processResponseJavaScriptPlayerWithScript(response);
          break;
    }
  },
  processResponseGetVideoInfo: function(info) {
    var video = new BBYTDLYouTubeVideo(this.videoIdentifier, info, this.playerScript);
    if (video.error.errorCode === BBYTKErrors.noError) {
      this.finishWithVideo(video);
    }
    else {
      if (video.error.errorDomain === BBYTKErrors.videoErrorDomain && video.error.errorCode === BBYTKErrors.youTubeErrorUseCipherSignature ) {
        this.noStreamVideo = video.error.errorInfo[BBYTKErrors.noStreamVideoUserInfoKey];
        this.startWatchPageRequest();
      }
      else {
        this.lastError = video.error;
        if (video.error.errorCode > 0)
          this.youTubeError = video.error;
        this.startNextRequest();
      }
    }
  },
  processResponseWithHTMLString: function(response) {
    this.webpage = new BBYTDLYouTubeVideoWebpage(response);
    if (this.webpage.javaScriptPlayerURL && this.webpage.javaScriptPlayerURL.length > 0)
    {
      this.currentRequestType = BBYTDLKRequestTypes.javaScriptPlayer;
      BBYTDLUtils.startRequestWithURL(this.webpage.javaScriptPlayerURL, function(err, data){
        if (err) {
          this.finishWithError(err);
          return;
        }
        else {
          this.processResponse(data);
        }
      }.bind(this));
    }
    else {
      if (this.webpage.isAgeRestricted) {
        this.currentRequestType = BBYTDLKRequestTypes.embedPage;
        BBYTDLUtils.sendYTRequest(this.videoIdentifier, this.languageIdentifier, this.currentRequestType, null, function(err, response){
          if (err) {
            this.finishWithError(err);
            return;
          }
          else {
            this.processResponse(response);
          }
        }.bind(this));
      }
      else {
        this.startNextRequest();
      }

    }
  },
  processResponseJavaScriptPlayerWithScript: function(scriptString) {
    this.playerScript = new BBYTDLYouTubePlayerScript(scriptString);
    if (!this.webpage.isAgeRestricted) {
      var eurl = "eurl=" + "https://youtube.googleapis.com/v/" + this.videoIdentifier;
      var hl = "&hl=" + this.languageIdentifier;
      var sts = "&sts=" + this.webpage.playerConfiguration.sts;
      var videoId = "&video_id=" + this.videoIdentifier;
      var url = "https://www.youtube.com/get_video_info?" + eurl + hl + sts + videoId;
      this.currentRequestType = BBYTDLKRequestTypes.getVideoInfo;

      BBYTDLUtils.startRequestWithURL(url, function(err, data){
        if (err) {
          this.finishWithError(err);
          return;
        }
        else {
          this.processResponse(data);
        }
      }.bind(this));
    } else {
      this.processResponseGetVideoInfo(this.webpage.videoInfo);
    }
  },
};

class BBYTDLYouTubeVideo {
  constructor(identifier, info, playerScript) {
    this.error = new BBYTDLError(BBYTKErrors.noError, BBYTKErrors.noError, {});
    this.identifier = identifier;
    this.info = info;
    this.playerScript = playerScript;
    var errorInfo = {};
    var streamMap = (info.url_encoded_fmt_stream_map)?info.url_encoded_fmt_stream_map:{};
    var httpLiveStream = (info.hlsvp)?info.hlsvp:"";
    var adaptiveFormats = (info.adaptive_fmts)?info.adaptive_fmts:"";
    if (streamMap.length > 0 || httpLiveStream.length > 0) {
      this.title = (info.title)?info.title:"";
      this.duration = (info.length_seconds)?info.length_seconds:0;
      this.smallThumbnail = (info.thumbnail_url)?info.thumbnail_url:"";
      this.mediumThumbnail = (info.iurlsd)?info.iurlsd:"";
      this.largeThumbnail = (info.iurlmaxres)?info.iurlmaxres:"";

      var streamQueries = streamMap.split(',');
      streamQueries.concat(adaptiveFormats.split(','));
      this.streamURLs = {};
      if (httpLiveStream) {
        streamURLs[BBYTDLKMisc.videoQualityHTTPLiveStreaming] = httpLiveStream;
      }

      for (var streamQuery in streamQueries) {
        var ytStream = BBYTDLUtils.queryStringToObject(streamQueries[streamQuery]);
        var scrambledSignature = ytStream.s;
        if (scrambledSignature && !playerScript) {
          errorInfo[BBYTKErrors.noStreamVideoUserInfoKey] = this;
          this.error = new BBYTDLError(BBYTKErrors.videoErrorDomain, BBYTKErrors.youTubeErrorUseCipherSignature, errorInfo);
          return;
        }

        var signature = null;
        if (this.playerScript != null && typeof this.playerScript.unscrambleSignature == 'function') {
            signature = this.playerScript.unscrambleSignature(scrambledSignature);
            if (playerScript && scrambledSignature && !signature) {
              continue;
            }
        }

        var urlString = (ytStream.url)?ytStream.url:"";
        var itag = (ytStream.itag)?ytStream.itag:-1;

        if (urlString.length>0 && itag.length>0)
        {
          var streamURL = urlString;
          if (!this.expirationDate) {
            this.expirationDate = BBYTDLUtils.expirationDate(streamURL);
          }

          if (signature) {
            var escapedSignature = encodeURI(signature);
            streamURL = urlString + "&signature=" + escapedSignature;
          }
          this.streamURLs[itag] = streamURL;
        }
      }

      if (Object.keys(this.streamURLs).length === 0)
      {
        this.error = new BBYTDLError(BBYTKErrors.videoErrorDomain, BBYTKErrors.youTubeErrorNoStreamAvailable, {});
      }
    }
    else {
      var reason = info.reason;
      if (reason && reason.length > 0) {
        errorInfo[BBYTKErrors.errorDescriptionInfoKey] = reason;
      }
      var errorCode = info.errorcode?info.errorcode:BBYTKErrors.youTubeErrorNoStreamAvailable;
      this.error = new BBYTDLError(BBYTKErrors.videoErrorDomain, errorCode, errorInfo);
    }
  }
}

class BBYTDLUtils {
  static queryStringToObject (queryString) {
    var queryStringObj = {};
    var vars = queryString.split('&');
    for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split('=');
        var key = decodeURIComponent(pair[0]);
        var value = decodeURIComponent(pair[1]);
        queryStringObj[key] = value;
    }
    return queryStringObj;
  }

  static sendYTRequest (videoId, languageId, ytRequestType, eventLabel, cb) {
    var url =  BBYTDLUtils.generateYTUrl(videoId, languageId, ytRequestType, eventLabel);
    BBYTDLUtils.startRequestWithURL(url, function(err, data){
      if (err) {
        cb(err, null);
      }
      else {
        cb(null, data);
      }
    });
  }

  static startRequestWithURL(url, cb) {
    requestCount++;
    if (requestCount > 6) {
      var err = {
        httpCode: BBYTKResultCode.maxNumberOfRequestsReached,
        message: "maximum number of requests reached"
      };
      cb(err, null);
      return;
    }
    else {
      var xmlhttp = new XMLHTTPRequest();
      //console.log("Starting request: "  + url);
      xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
            var data = xmlhttp.responseText;
            cb(null, data);
        } else {
          var err = {
            httpCode: xmlhttp.status,
            message: "error sending request"
          };
          cb(err, null);
        }
      };
      xmlhttp.open("GET", url);
      xmlhttp.send();
    }
  }

  static generateYTUrl(videoId, languageId, ytRequestType, eventLabel) {
    var url = "";
    var queryString = "";
    switch (ytRequestType) {
      case BBYTDLKRequestTypes.getVideoInfo:
          url = BBYTDLKUrls.getVideoInfo;
          queryString = "el=" + eventLabel + "&hl=" + languageId + "&ps=default&video_id=" + videoId;
          break;
      case BBYTDLKRequestTypes.watchVideo:
          url = BBYTDLKUrls.watchVideo;
          queryString = "v=" + videoId + "&hl=" + languageId + "&has_verified=true";
          break;
      case BBYTDLKRequestTypes.embedPage:
        url = BBYTDLKUrls.embedURLString;
        queryString = videoId;
        break;
    }
    return url + queryString;
  }

  static forceBreak() {
    try {
      throw "break!";
    } catch( ex ) {

    }
  }

  static expirationDate(streamURL) {
    var query = BBYTDLUtils.queryStringToObject(streamURL);
    var expire = query.expire;
    if (expire > 0)
      return expire;
    return;
  }
}

class BBYTDLError {
  constructor(eDomain, eCode, eErrorInfo) {
    this.errorDomain = eDomain;
    this.errorCode = eCode;
    this.errorInfo = eErrorInfo;
  }
}

var document = { documentElement: {} };
var location = { hash: "" };
var navigator = { userAgent: "" };
var window = {
  document: { documentElement: {} },
  location: { hash: "" },
  navigator: { userAgent: "" }
};

function evalScript(script) {
  ytdlAddScriptToContext(script);
}


class BBYTDLYouTubePlayerScript {
  constructor(scriptString) {
    scriptString = scriptString.replace(/(\n|\r|\r\n)/g," ");
    var anonymousFunctionRegularExpression = new RegExp('\\(function\\([^)]*\\)\\{(.*)\\}\\)\\([^)]*\\)');
    var functionResults = anonymousFunctionRegularExpression.exec(scriptString);
    var script = '';
    if (functionResults.length > 1) {
      script = functionResults[1];
      try {
        evalScript(script);
        var signatureRegularExpression = new RegExp("[\"']signature[\"']\\s*,\\s*([^\\(]+)");
        var signatureResults = signatureRegularExpression.exec(script);
        var signatureFunctionName = '';
        if (signatureResults.length > 1) {
          this.signatureFunction = signatureResults[1];
        }
      } catch(e) {
        var err = e.constructor('Error in Evaled Script: ' + e.message);
        err.lineNumber = e.lineNumber - err.lineNumber + 3;
        throw err;
      }
    }
  }

  unscrambleSignature (signature) {
    if (this.signatureFunction && this.signatureFunction.length>0 && signature && signature.length > 0) {
      var fn = eval(this.signatureFunction);
      if (typeof fn === "function") {
        return fn.apply(null, [signature]);
      }
    }
    return {
      errCode: 1,
      description: "Unscramble signature failed"
    };
  }
}

class BBYTDLYouTubeVideoWebpage {
  constructor(html) {
    this.html = html;
    this.playerConfiguration = this.getPlayerConfiguration();
    if (this.playerConfiguration != null) {
      this.javaScriptPlayerURL = this.getJavaScriptPlayerURL();
      this.videoInfo = this.getVideoInfo();
      // this.regionsAllowed = this.getRegionsAllowed();
    }

    this.isAgeRestricted = this.getIsAgeRestricted();
  }

  getPlayerConfiguration() {
    if (!this.playerConfiguration) {
      var regex = new RegExp("ytplayer.config\\s*=\\s*(\\{.*?\\});|\\(\\s*'PLAYER_CONFIG',\\s*(\\{.*?\\})\\s*\\)");
      // var regex = new RegExp('ytplayer.config\\s*=\\s*(\\{.*?\\});');

      var results = regex.exec(this.html);
      for (var result in results) {
        var resText = encodeURI(results[result]);
        resText = decodeURI(resText);
        //VEVO VIDEOS
        resText = resText.replace("ytplayer.config = ", "");
        //
        resText = resText.replace("('PLAYER_CONFIG', ", "");
        resText = resText.substring(0, resText.length-1);
        var playerConfiguration = JSON.parse(resText);
        if (Object.keys(playerConfiguration).length>0) {
          this.playerConfiguration = playerConfiguration;
          break;
        }
      }
    }
    return this.playerConfiguration;
  }

  getVideoInfo() {
    if (!this.videoInfo) {
      var args = this.playerConfiguration.args;
      var info = {};
      for (var arg in args) {
        if (((typeof args[arg]) == 'string') || ((typeof args[arg]) == 'number')) {
          info[arg] = args[arg];
        }
      }
      this.videoInfo = info;
    }
    return this.videoInfo;
  }

  getJavaScriptPlayerURL() {
    if (!this.javaScriptPlayerURL) {
      var jsAssets = this.playerConfiguration.assets.js;
      if ((typeof jsAssets) == 'string') {
        var javaScriptPlayerURLString = jsAssets;
        if (javaScriptPlayerURLString.substring(0, 2) == "//") {
            javaScriptPlayerURLString = "https:" + jsAssets;
        }
        this.javaScriptPlayerURL = javaScriptPlayerURLString;
      }
    }
    return this.javaScriptPlayerURL;
  }

  getIsAgeRestricted() {
    if (!this.isAgeRestricted) {
      this.isAgeRestricted = this.html.indexOf("og:restrictions:age") > -1;
    }
    return this.isAgeRestricted;
  }

  getRegionsAllowed() {
    if (!this.regionsAllowed) {
      var regionsAllowed = [];
      var regex = "meta\\s+itemprop=\"regionsAllowed\"\\s+content=\"(.*)\"";
      var regions = this.html.match(regex);
      if (regions.length > 0) {
        regionsAllowed = regions[1];
      }
      this.regionsAllowed = regionsAllowed;
    }
    return this.regionsAllowed;
  }
}
"
}
